= Aegis - A complete authorization solution for Rails

Aegis is an authorization solution for Ruby on Rails that supports roles and a RESTish, resource-style declaration of
permission rules. Getting started with Aegis is easy and requires very little integration. As your authorization
requirements become more complex, Aegis will grow with you.

== Full-blown Example

=== Defining permissions

Permissions are defined similiar to routes. You can describe the sections of your site
using <tt>resources</tt>. Your permission resources might match those in your routes, but don't have to.

Access to resources or individual actions can be granted or denied to specific roles.
You can also declare access rules for all roles, or only for reading or writing requests:

    # app/models/permissions.rb
    class Permissions < Aegis::Permissions

      role :guest
      role :user
      role :admin

      resource :profile do
        allow :everyone
        deny :guest
      end

      resources :news_posts do

        reading do
          allow :everyone
        end

        writing do
          allow :admin
        end

        resources :comments, :except => [:destroy] do
          allow :everyone
          action :update do
            allow :user do
              object.author == user
            end
          end
        end

      end

      namespace :admin do
        resources :users do
          allow :admin
        end
      end

    end

=== In your user model

Now we assign roles to users. For this, the users table needs to have a string
column +role_name+. In your model, all you do is this:

    # app/models/user.rb
    class User < ActiveRecord::Base
      has_role
    end

You can now ask a user if she is allowed to access a given action:
    
    # app/views/posts/index.html.erb
    @posts.each do |post|
      <%= render post %>
      <% if current_user.may_update_post? post %>
        <%= link_to 'Edit', edit_post_path(post) %>
      <% end %>
    <% end %>

=== In your controllers

You can protect all actions in a controller through an Aegis resource with a single line:

    # app/controllers/posts_controller.rb
    class CommentsController
      permissions :news_post_comments
    end

We understand that not all controllers are RESTful and that you can have custom actions and whatnot.
Be assured that Aegis comes with great tools to deal with all of these cases.

== Detailled API

Working on it.


== Our stance on multiple roles per user

We believe that you should only distinguish roles that have different ways of resolving their permissions. A typical set of roles would be

* anonymous guest (has access to nothing with some exceptions)
* signed up user (has access to some things depending on its attributes and associations)
* administrator (has access to everything)

We don't do multiple, parametrized roles like "leader for project #2" and "author of post #7".
That would be reinventing associations. Just use a single :user role and let your permission block
query regular associations and attributes.

== Installation

Add the following to your <tt>Initializer.run</tt> block in your <tt>environment.rb</tt>:
    config.gem 'aegis', :source => 'http://gemcutter.org'
Then do a
    sudo rake gems:install

Alternatively, use
    sudo gem sources -a http://gemcutter.org
    sudo gem install aegis


== Credits

Henning Koch, Tobias Kraze

{gem-session.com}[http://gem-session.com/]

{www.makandra.de}[http://www.makandra.de/]
